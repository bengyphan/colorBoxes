{"version":3,"sources":["Box.js","ColorBoxGrid.js","ColorBoxes.js","App.js","reportWebVitals.js","index.js"],"names":["Box","color","isSelected","className","style","backgroundColor","width","height","ColorBoxGrid","boxes","map","box","i","choice","arr","Math","floor","random","length","ColorBoxes","props","useState","Array","from","numBoxes","colors","setBoxes","onClick","idx","boxCopy","obj","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAceA,G,MAXH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACrB,OACC,qBACCC,UAAU,MACVC,MAAO,CAAEC,gBAAiBJ,EAAOK,MAAO,MAAOC,OAAQ,SAFxD,SAIEL,EAAa,UAAY,SCKdM,G,KAVM,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACvB,OACC,qBAAKN,UAAU,eAAf,SACEM,EAAMC,KAAI,SAACC,EAAKC,GAAN,OACV,cAAC,EAAD,CAAKX,MAAOU,EAAIV,MAAOC,WAAYS,EAAIT,YAAiBU,UCJ5D,SAASC,EAAOC,GAEf,OAAOA,EADOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,SAG9C,IAAMC,EAAa,SAAAC,GAAU,IAAD,EACDC,mBACzBC,MAAMC,KAAK,CAAEL,OAAQE,EAAMI,WAAY,iBAAO,CAC7CvB,MAAOY,EAAOO,EAAMK,QACpBvB,YAAY,OAJa,mBACpBO,EADoB,KACbiB,EADa,KAiB3B,OACC,sBAAKvB,UAAU,aAAf,UACC,6CACA,cAAC,EAAD,CAAcM,MAAOA,IACrB,wBAAQkB,QAdU,WACnB,IAAIC,EAAMb,KAAKC,MAAMD,KAAKE,SAAWG,EAAMI,UAC3CE,GAAS,SAAAjB,GACR,IAAIoB,EAAO,YAAOpB,GAIlB,OAHAoB,EAAQD,GAAK3B,MAAQY,EAAOO,EAAMK,QAClCI,EAAQnB,KAAI,SAAAoB,GAAG,OAAKA,EAAI5B,YAAa,KACrC2B,EAAQD,GAAK1B,YAAa,EACnB2B,MAOP,wBAKHV,EAAWY,aAAe,CACzBP,SAAU,GACVC,OAAQ,CACP,OACA,QACA,iBACA,OACA,YACA,aACA,WACA,YACA,OACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,SACA,gBAIaN,QCjDAa,MARf,WACC,OACC,qBAAK7B,UAAU,MAAf,SACC,cAAC,EAAD,OCMY8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.35f143a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Box.css';\r\n\r\nconst Box = ({ color, isSelected }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"Box\"\r\n\t\t\tstyle={{ backgroundColor: color, width: '15%', height: '100px' }}\r\n\t\t>\r\n\t\t\t{isSelected ? 'clicked' : null}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Box;\r\n","import React from 'react';\r\nimport Box from './Box.js';\r\nimport './ColorBoxGrid.css';\r\n\r\nconst ColorBoxGrid = ({ boxes }) => {\r\n\treturn (\r\n\t\t<div className=\"ColorBoxGrid\">\r\n\t\t\t{boxes.map((box, i) => (\r\n\t\t\t\t<Box color={box.color} isSelected={box.isSelected} key={i} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ColorBoxGrid;\r\n","import React, { useState } from 'react';\r\nimport ColorBoxGrid from './ColorBoxGrid';\r\nimport './ColorBoxGrid.css';\r\n\r\nfunction choice(arr) {\r\n\tlet randIdx = Math.floor(Math.random() * arr.length);\r\n\treturn arr[randIdx];\r\n}\r\nconst ColorBoxes = props => {\r\n\tconst [boxes, setBoxes] = useState(\r\n\t\tArray.from({ length: props.numBoxes }, () => ({\r\n\t\t\tcolor: choice(props.colors),\r\n\t\t\tisSelected: false,\r\n\t\t}))\r\n\t);\r\n\tconst handleClick = () => {\r\n\t\tlet idx = Math.floor(Math.random() * props.numBoxes);\r\n\t\tsetBoxes(boxes => {\r\n\t\t\tlet boxCopy = [...boxes];\r\n\t\t\tboxCopy[idx].color = choice(props.colors);\r\n\t\t\tboxCopy.map(obj => (obj.isSelected = false));\r\n\t\t\tboxCopy[idx].isSelected = true;\r\n\t\t\treturn boxCopy;\r\n\t\t});\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"ColorBoxes\">\r\n\t\t\t<h1>Color Boxes</h1>\r\n\t\t\t<ColorBoxGrid boxes={boxes} />\r\n\t\t\t<button onClick={handleClick}>Change</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nColorBoxes.defaultProps = {\r\n\tnumBoxes: 16,\r\n\tcolors: [\r\n\t\t'Aqua',\r\n\t\t'Black',\r\n\t\t'BlanchedAlmond',\r\n\t\t'Blue',\r\n\t\t'Chocolate',\r\n\t\t'DodgerBlue',\r\n\t\t'Lavender',\r\n\t\t'LawnGreen',\r\n\t\t'Peru',\r\n\t\t'Plum',\r\n\t\t'SpringGreen',\r\n\t\t'SteelBlue',\r\n\t\t'Tan',\r\n\t\t'Teal',\r\n\t\t'Thistle',\r\n\t\t'Tomato',\r\n\t\t'Turquoise',\r\n\t\t'Violet',\r\n\t\t'Yellow',\r\n\t\t'YellowGreen',\r\n\t],\r\n};\r\n\r\nexport default ColorBoxes;\r\n","import './App.css';\nimport ColorBoxes from './ColorBoxes';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ColorBoxes />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}